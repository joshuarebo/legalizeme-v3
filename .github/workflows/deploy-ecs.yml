name: Deploy to AWS ECS Fargate

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: counsel-ai
  ECS_SERVICE: counsel-service
  ECS_CLUSTER: counsel-cluster
  ECS_TASK_DEFINITION: counsel-task
  CONTAINER_NAME: counsel-container

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short
      env:
        TESTING: "true"
        ENVIRONMENT: "testing"
        DATABASE_URL: "sqlite:///./test_counsel.db"
        TEST_DATABASE_URL: "sqlite:///./test_counsel.db"
        REDIS_URL: ""
        AWS_ACCESS_KEY_ID: "test-key"
        AWS_SECRET_ACCESS_KEY: "test-secret"
        AWS_REGION: "us-east-1"
        AWS_BEDROCK_MODEL_ID_PRIMARY: "test-model-primary"
        AWS_BEDROCK_MODEL_ID_SECONDARY: "test-model-secondary"
        AWS_BEDROCK_MODEL_ID_FALLBACK: "test-model-fallback"
        SECRET_KEY: "test-secret-key-for-testing-only"

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -f Dockerfile.ecs -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition $ECS_TASK_DEFINITION --query taskDefinition > task-definition.json

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Verify deployment
      run: |
        # Wait for service to stabilize
        aws ecs wait services-stable --cluster $ECS_CLUSTER --services $ECS_SERVICE
        
        # Get service details
        SERVICE_INFO=$(aws ecs describe-services --cluster $ECS_CLUSTER --services $ECS_SERVICE)
        RUNNING_COUNT=$(echo $SERVICE_INFO | jq -r '.services[0].runningCount')
        DESIRED_COUNT=$(echo $SERVICE_INFO | jq -r '.services[0].desiredCount')
        
        echo "Service Status:"
        echo "Running Count: $RUNNING_COUNT"
        echo "Desired Count: $DESIRED_COUNT"
        
        if [ "$RUNNING_COUNT" -eq "$DESIRED_COUNT" ]; then
          echo "‚úÖ Deployment successful!"
        else
          echo "‚ùå Deployment failed - running count doesn't match desired count"
          exit 1
        fi

    - name: Get Application URL
      run: |
        # Get load balancer DNS name
        ALB_ARN=$(aws elbv2 describe-load-balancers --names counsel-alb --query 'LoadBalancers[0].LoadBalancerArn' --output text)
        ALB_DNS=$(aws elbv2 describe-load-balancers --load-balancer-arns $ALB_ARN --query 'LoadBalancers[0].DNSName' --output text)
        
        echo "üöÄ Application deployed successfully!"
        echo "Application URL: http://$ALB_DNS"
        echo "Health Check: http://$ALB_DNS/health"
        echo "API Documentation: http://$ALB_DNS/docs"
        
        # Test health endpoint
        echo "Testing health endpoint..."
        sleep 30  # Wait for service to be ready
        curl -f "http://$ALB_DNS/health" || echo "Health check failed - service may still be starting"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always()
    
    steps:
    - name: Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ Deployment to AWS ECS Fargate completed successfully!"
        echo "The Counsel AI Legal Backend is now live and ready to serve requests."
        
    - name: Deployment Failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå Deployment failed. Please check the logs and try again."
        exit 1
