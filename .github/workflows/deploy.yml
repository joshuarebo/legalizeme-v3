name: LegalizeMe Counsel AI - Production Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_REGISTRY: docker.io
  IMAGE_NAME: joshuarebo/legalizeme-counsel-ai

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-asyncio httpx
        pip install -r requirements.txt

    - name: Run Bedrock Model Tests
      env:
        DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_BEDROCK_MODEL_ID_PRIMARY: ${{ secrets.AWS_BEDROCK_MODEL_ID_PRIMARY }}
        AWS_BEDROCK_MODEL_ID_SECONDARY: ${{ secrets.AWS_BEDROCK_MODEL_ID_SECONDARY }}
        AWS_BEDROCK_MODEL_ID_FALLBACK: ${{ secrets.AWS_BEDROCK_MODEL_ID_FALLBACK }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        HUGGING_FACE_TOKEN: ${{ secrets.HUGGING_FACE_TOKEN }}
      run: |
        pytest tests/test_bedrock_models.py -v
        python scripts/simple_bedrock_test.py

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ env.IMAGE_NAME }}:latest
          ${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Deploy notification
      run: |
        echo "Docker image pushed successfully!"
        echo "Image: ${{ env.IMAGE_NAME }}:${{ github.sha }}"